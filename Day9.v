From Coq Require Import Lists.List.
From Coq Require Import BinNums.
From Coq Require Import ZArith.BinInt.
From Coq Require Import ZArith.BinIntDef.
From Coq Require Import ZArith.Zdigits.
From Coq Require Import ZArith.Znat.
From Coq Require Import ZArith Psatz.
From Coq Require Import PeanoNat.
Import ListNotations.


Inductive move :=
  | R : nat -> move
  | L : nat -> move
  | U : nat -> move
  | D : nat -> move
.

Definition test_in := [
R 4;
U 4;
L 3;
D 1;
R 4;
D 1;
L 5;
R 2
].

Definition input := [
R 2;
L 2;
D 2;
U 2;
R 2;
D 2;
L 2;
D 2;
U 2;
L 2;
D 1;
R 1;
D 2;
R 2;
U 1;
R 1;
U 2;
R 1;
L 2;
D 2;
L 1;
U 1;
L 1;
D 1;
R 1;
L 2;
U 2;
R 2;
U 1;
R 2;
L 2;
D 1;
U 1;
D 2;
L 1;
U 1;
L 1;
D 1;
U 1;
D 1;
L 2;
D 2;
U 2;
L 2;
U 1;
R 2;
D 2;
L 1;
R 1;
U 1;
R 1;
L 1;
U 2;
D 1;
U 2;
R 1;
U 1;
R 2;
D 2;
R 2;
U 2;
D 2;
U 2;
L 1;
D 2;
R 1;
L 2;
D 2;
R 2;
L 2;
U 2;
L 2;
R 1;
D 1;
R 1;
L 2;
D 1;
L 2;
R 1;
U 1;
R 1;
U 1;
L 2;
U 1;
D 2;
R 1;
L 1;
D 1;
R 1;
L 2;
R 2;
L 2;
R 1;
L 1;
D 1;
L 1;
R 1;
D 2;
U 1;
D 2;
R 1;
D 1;
U 1;
L 1;
R 1;
D 2;
R 2;
L 2;
R 1;
L 1;
R 1;
U 3;
L 2;
R 3;
L 1;
R 1;
L 2;
D 1;
U 3;
L 1;
R 3;
U 1;
L 2;
U 2;
D 2;
R 2;
D 1;
L 2;
U 1;
R 1;
L 3;
R 2;
L 3;
R 2;
L 2;
D 2;
U 3;
R 2;
L 1;
R 2;
U 1;
D 2;
U 3;
D 1;
U 3;
L 1;
R 3;
D 2;
R 1;
L 2;
D 1;
L 1;
D 3;
U 2;
L 3;
R 1;
U 3;
L 1;
R 2;
U 3;
D 2;
U 3;
L 3;
R 1;
L 2;
R 2;
D 3;
L 1;
D 3;
R 3;
L 1;
U 1;
D 1;
L 3;
D 1;
U 2;
D 3;
U 3;
L 1;
U 2;
D 1;
R 3;
D 1;
R 1;
L 2;
U 1;
R 1;
L 1;
U 3;
D 3;
U 3;
R 1;
D 3;
U 1;
L 2;
R 2;
U 2;
R 1;
D 3;
L 1;
D 2;
U 2;
R 2;
D 2;
R 3;
L 2;
R 1;
L 3;
D 3;
R 1;
L 1;
U 3;
R 1;
D 3;
R 3;
D 2;
U 2;
R 2;
D 2;
U 3;
D 2;
R 1;
U 2;
L 3;
D 1;
L 2;
U 1;
D 1;
U 4;
R 4;
U 4;
D 4;
U 3;
D 1;
R 4;
L 1;
D 2;
R 3;
U 1;
R 2;
D 2;
U 4;
R 3;
D 2;
L 1;
U 4;
D 3;
U 1;
D 4;
L 2;
U 3;
D 4;
R 3;
L 2;
D 4;
L 2;
R 3;
U 2;
R 2;
U 1;
L 3;
R 3;
L 3;
U 4;
R 4;
U 2;
R 3;
U 1;
L 3;
D 4;
L 4;
R 4;
D 3;
L 4;
R 1;
U 4;
D 3;
R 3;
U 1;
L 4;
U 2;
L 2;
D 4;
U 3;
R 1;
U 2;
D 4;
U 4;
D 4;
U 1;
L 4;
R 3;
U 2;
R 1;
L 4;
D 4;
U 3;
R 2;
L 2;
U 3;
L 1;
R 1;
L 1;
U 4;
L 1;
R 3;
U 1;
R 1;
D 2;
R 2;
L 4;
D 1;
L 2;
R 1;
D 1;
L 3;
D 3;
U 4;
R 2;
L 4;
U 2;
L 1;
R 3;
U 3;
L 2;
R 2;
D 2;
R 3;
U 4;
L 1;
U 3;
L 3;
U 1;
R 1;
L 2;
D 3;
L 5;
D 2;
U 2;
D 4;
R 2;
L 3;
U 3;
R 1;
U 4;
D 1;
R 2;
U 1;
L 5;
R 4;
D 5;
R 5;
D 2;
U 2;
L 5;
D 2;
U 3;
R 2;
L 4;
D 5;
L 4;
R 4;
U 5;
R 2;
U 5;
L 1;
D 2;
L 3;
U 4;
D 2;
U 2;
L 3;
R 4;
U 4;
R 5;
L 1;
D 2;
U 4;
D 5;
L 5;
R 4;
U 3;
R 2;
U 5;
L 3;
U 5;
R 3;
U 2;
R 2;
D 3;
R 2;
L 2;
D 4;
R 4;
U 3;
R 3;
D 5;
R 2;
U 3;
L 5;
R 1;
U 5;
D 4;
R 3;
D 5;
U 1;
R 4;
L 5;
D 1;
U 3;
L 4;
U 3;
R 3;
D 5;
U 5;
D 5;
L 5;
U 4;
D 5;
L 3;
R 3;
D 4;
U 2;
L 5;
R 1;
U 5;
L 4;
U 4;
D 5;
R 4;
L 1;
U 2;
D 2;
L 1;
R 2;
D 4;
R 5;
L 3;
R 4;
D 4;
L 4;
R 2;
L 1;
D 3;
L 3;
R 2;
D 3;
R 5;
D 2;
U 4;
D 5;
L 1;
U 3;
D 3;
U 6;
L 1;
R 1;
L 4;
R 6;
L 1;
R 1;
D 2;
U 6;
R 1;
U 3;
R 6;
U 1;
R 1;
L 3;
D 5;
R 6;
L 6;
R 1;
U 2;
R 1;
L 5;
R 5;
D 6;
R 4;
D 4;
R 1;
U 6;
R 4;
U 1;
R 5;
U 3;
L 5;
U 1;
R 5;
L 5;
D 5;
R 3;
L 5;
D 3;
L 2;
U 3;
R 1;
U 1;
D 4;
R 4;
L 2;
U 3;
L 1;
U 5;
L 5;
D 4;
R 6;
U 6;
L 5;
U 3;
R 3;
D 1;
U 6;
R 2;
L 4;
R 2;
L 5;
U 3;
D 1;
U 3;
R 1;
D 1;
L 3;
U 6;
L 5;
U 2;
L 3;
D 1;
L 3;
U 6;
L 4;
D 3;
R 4;
D 1;
L 4;
U 1;
R 6;
D 6;
R 5;
D 4;
R 4;
D 4;
U 6;
D 4;
L 3;
R 4;
L 5;
R 1;
D 6;
U 6;
D 2;
R 1;
L 6;
U 6;
L 5;
D 6;
U 4;
R 4;
D 3;
U 5;
D 6;
U 7;
L 5;
U 7;
R 6;
U 1;
L 6;
U 1;
R 2;
D 7;
R 4;
U 1;
R 6;
L 6;
D 4;
L 4;
U 4;
R 1;
D 7;
L 7;
D 7;
L 5;
D 1;
L 1;
U 2;
R 5;
D 5;
L 3;
U 5;
D 6;
L 4;
R 1;
U 6;
L 3;
D 6;
L 7;
D 6;
R 3;
U 7;
R 1;
D 6;
R 3;
U 7;
D 5;
U 1;
L 4;
U 3;
D 3;
U 3;
R 1;
L 2;
R 2;
L 1;
U 3;
D 5;
U 7;
D 1;
U 7;
L 4;
D 3;
U 4;
R 6;
D 2;
L 5;
R 7;
L 5;
R 1;
U 6;
R 7;
U 4;
D 3;
U 1;
L 1;
D 1;
U 6;
L 1;
U 1;
R 7;
L 4;
D 1;
U 2;
R 7;
L 7;
R 5;
U 4;
R 2;
L 7;
U 6;
R 5;
L 1;
R 3;
U 7;
D 7;
L 4;
R 1;
U 4;
R 1;
L 7;
D 4;
L 5;
D 7;
U 4;
L 5;
R 6;
U 1;
L 4;
R 6;
D 2;
L 1;
D 2;
U 4;
L 5;
U 5;
D 4;
U 7;
L 2;
D 3;
U 5;
R 7;
D 1;
R 7;
D 6;
U 4;
R 3;
D 5;
U 5;
D 8;
R 7;
L 7;
R 1;
D 5;
L 3;
R 1;
U 3;
R 6;
D 5;
R 6;
L 5;
D 7;
L 5;
R 2;
D 1;
R 7;
L 1;
D 3;
R 8;
L 5;
U 8;
R 6;
U 4;
D 2;
U 4;
D 5;
U 7;
D 5;
U 2;
D 3;
U 1;
R 4;
L 2;
R 4;
U 7;
R 8;
D 2;
U 3;
R 7;
D 2;
U 1;
D 6;
R 4;
L 4;
R 3;
D 8;
R 8;
U 7;
L 3;
U 7;
D 1;
U 6;
R 8;
L 1;
R 1;
D 8;
U 7;
L 3;
D 4;
L 4;
R 2;
L 6;
D 6;
L 4;
R 7;
D 8;
L 8;
U 8;
R 2;
L 6;
U 5;
D 2;
L 5;
U 1;
L 6;
D 6;
U 7;
L 2;
U 5;
R 6;
D 5;
L 8;
U 8;
R 1;
U 2;
L 3;
D 1;
L 3;
U 4;
D 3;
L 6;
R 9;
L 9;
U 9;
R 1;
D 4;
U 1;
L 3;
R 7;
U 7;
R 1;
U 1;
R 2;
D 4;
U 8;
L 7;
R 3;
U 8;
L 1;
R 1;
D 7;
U 3;
L 3;
U 8;
D 3;
L 1;
D 6;
L 3;
U 4;
D 3;
U 3;
L 3;
D 5;
L 6;
U 9;
L 1;
U 2;
L 3;
R 1;
L 9;
D 2;
U 1;
L 3;
R 9;
L 8;
R 2;
L 7;
D 4;
L 4;
R 2;
L 4;
R 8;
D 4;
L 2;
D 5;
R 8;
U 6;
L 9;
D 1;
L 6;
R 9;
D 4;
L 5;
U 5;
D 1;
U 3;
L 4;
U 2;
L 2;
R 2;
L 1;
R 7;
L 4;
D 4;
U 4;
L 1;
R 2;
D 6;
L 1;
U 8;
D 7;
R 5;
D 7;
R 7;
L 8;
U 8;
L 5;
D 7;
U 2;
D 2;
R 1;
U 2;
L 1;
R 1;
L 2;
D 1;
U 9;
L 9;
U 9;
R 1;
U 3;
R 7;
U 8;
R 1;
L 7;
D 1;
U 7;
R 9;
D 8;
R 2;
D 5;
L 5;
D 2;
L 6;
U 6;
R 1;
L 1;
D 2;
R 4;
L 3;
U 2;
R 5;
L 3;
R 6;
U 8;
R 1;
U 1;
R 7;
D 10;
R 2;
D 4;
R 3;
L 5;
D 1;
U 8;
R 1;
U 4;
D 6;
L 5;
U 8;
D 6;
L 6;
R 4;
L 9;
R 5;
U 6;
L 8;
U 6;
L 10;
D 4;
U 6;
L 8;
U 3;
R 3;
L 6;
U 1;
R 9;
D 8;
U 9;
R 5;
U 10;
R 8;
U 9;
L 7;
R 4;
D 7;
U 3;
L 5;
R 3;
D 9;
L 9;
U 6;
R 10;
L 2;
D 7;
U 8;
D 4;
L 3;
U 4;
R 2;
L 10;
D 4;
U 10;
R 7;
D 5;
R 7;
U 3;
L 10;
R 8;
L 7;
D 3;
L 6;
R 1;
L 2;
U 1;
R 1;
U 8;
R 5;
L 9;
R 9;
L 1;
D 4;
R 6;
U 7;
L 7;
R 3;
U 4;
D 2;
U 8;
L 5;
D 3;
L 6;
D 7;
L 2;
U 1;
R 6;
L 8;
D 9;
R 3;
U 4;
D 8;
L 5;
R 9;
L 1;
U 7;
L 5;
D 4;
U 5;
L 4;
R 4;
L 3;
U 11;
D 1;
L 10;
U 6;
L 5;
D 3;
U 8;
D 11;
L 8;
R 2;
U 5;
L 9;
D 3;
L 11;
R 2;
U 5;
L 7;
D 11;
R 8;
U 1;
L 10;
R 10;
L 9;
R 9;
L 8;
R 7;
D 3;
U 6;
R 11;
U 8;
D 4;
L 9;
U 3;
D 5;
L 4;
R 5;
D 7;
L 5;
U 10;
D 8;
L 3;
D 2;
U 9;
D 6;
L 3;
U 3;
D 8;
U 4;
R 1;
L 9;
U 4;
L 5;
D 10;
L 11;
U 6;
D 8;
L 5;
R 9;
L 2;
U 2;
L 10;
R 5;
U 6;
L 7;
R 7;
U 9;
D 6;
R 7;
D 8;
U 7;
R 6;
L 2;
D 6;
R 8;
L 5;
R 1;
L 10;
R 8;
U 11;
R 10;
L 10;
R 10;
L 4;
U 4;
D 9;
U 8;
R 5;
D 7;
U 7;
L 6;
D 4;
L 9;
R 2;
U 8;
D 2;
L 2;
D 2;
U 6;
L 2;
R 9;
U 10;
D 11;
U 3;
R 9;
U 1;
L 11;
R 7;
L 4;
R 5;
U 10;
L 3;
R 10;
L 10;
D 2;
L 9;
D 9;
L 6;
D 11;
R 10;
L 2;
R 4;
D 2;
R 4;
D 8;
L 3;
U 10;
R 4;
L 2;
U 1;
L 3;
R 1;
L 2;
R 3;
D 2;
L 2;
D 3;
R 5;
U 10;
L 12;
R 5;
D 5;
U 9;
L 9;
D 2;
L 8;
U 2;
L 11;
U 5;
L 8;
U 7;
R 4;
U 10;
D 4;
L 5;
R 3;
D 8;
R 12;
L 5;
U 9;
L 10;
R 5;
U 10;
R 1;
L 5;
U 6;
D 7;
L 12;
D 2;
R 12;
L 1;
U 11;
D 8;
R 12;
L 8;
U 3;
R 9;
L 8;
D 2;
L 10;
D 10;
R 4;
D 2;
R 11;
U 4;
R 10;
U 7;
L 7;
D 5;
U 5;
R 9;
D 10;
L 10;
U 1;
D 11;
U 4;
D 5;
U 5;
D 8;
U 2;
D 4;
R 4;
L 5;
U 10;
D 12;
R 9;
L 11;
R 9;
L 1;
D 9;
L 11;
D 12;
U 4;
R 7;
D 1;
U 3;
L 4;
U 9;
R 12;
D 1;
L 7;
U 7;
D 6;
U 1;
R 3;
L 7;
U 5;
L 2;
D 10;
R 12;
L 3;
U 7;
D 10;
L 5;
R 1;
U 9;
L 1;
D 11;
R 5;
L 2;
D 1;
U 3;
R 2;
L 3;
U 5;
L 3;
D 5;
R 10;
L 7;
R 12;
U 4;
D 3;
R 3;
L 2;
R 7;
U 4;
D 9;
U 7;
D 1;
R 9;
L 2;
U 6;
R 5;
D 3;
U 7;
R 12;
L 10;
D 11;
L 8;
U 12;
D 13;
U 9;
D 5;
U 4;
R 2;
L 3;
U 13;
R 4;
L 9;
U 4;
L 3;
U 9;
R 1;
D 6;
U 4;
D 3;
U 5;
R 5;
L 11;
R 8;
D 1;
U 4;
D 10;
R 5;
D 10;
U 3;
D 4;
R 1;
U 3;
R 13;
L 6;
D 8;
R 12;
L 4;
U 2;
L 13;
D 11;
L 4;
U 8;
L 10;
R 2;
D 8;
R 11;
L 2;
D 8;
R 8;
L 10;
U 10;
L 4;
D 9;
L 7;
D 11;
L 10;
U 13;
L 6;
U 7;
D 8;
L 3;
R 10;
L 14;
U 13;
L 11;
D 5;
R 8;
U 2;
D 9;
L 14;
U 7;
R 4;
U 1;
D 8;
U 8;
D 9;
L 2;
D 7;
R 1;
D 9;
R 2;
U 4;
D 8;
L 9;
R 6;
L 2;
R 11;
D 6;
L 5;
U 8;
L 4;
R 3;
D 5;
L 3;
U 9;
R 3;
U 1;
D 7;
R 1;
L 10;
U 1;
L 8;
U 11;
D 8;
U 12;
R 9;
L 5;
D 10;
L 2;
R 8;
D 10;
R 6;
D 1;
L 11;
D 8;
R 7;
L 14;
D 12;
L 11;
R 11;
U 9;
R 12;
D 10;
L 12;
R 4;
L 8;
D 2;
R 3;
L 14;
R 7;
U 10;
R 1;
L 6;
R 4;
D 11;
L 13;
R 12;
U 4;
L 12;
U 10;
D 8;
R 10;
D 9;
R 13;
L 2;
U 2;
D 7;
U 7;
R 3;
D 3;
R 13;
U 8;
R 10;
U 13;
D 14;
R 11;
D 7;
R 2;
U 5;
D 2;
L 6;
U 14;
L 10;
R 9;
U 11;
R 12;
D 5;
L 11;
R 12;
U 11;
R 8;
L 2;
D 14;
U 3;
D 9;
U 5;
L 4;
U 5;
L 6;
D 3;
L 1;
R 10;
L 4;
D 12;
U 15;
L 5;
D 11;
L 15;
D 10;
L 14;
U 1;
L 14;
D 6;
R 6;
U 9;
R 1;
L 7;
D 11;
U 12;
D 2;
R 7;
L 2;
D 13;
U 13;
R 6;
L 3;
D 3;
R 11;
U 3;
D 3;
U 11;
L 10;
U 7;
R 7;
D 9;
U 10;
R 11;
U 12;
D 11;
R 11;
U 2;
R 2;
D 9;
R 12;
D 1;
L 11;
R 1;
U 2;
R 14;
L 4;
R 1;
D 12;
R 7;
U 12;
L 2;
U 5;
D 7;
R 15;
D 5;
L 9;
D 7;
R 10;
U 12;
D 10;
R 11;
D 5;
U 10;
R 2;
U 11;
R 3;
U 6;
D 14;
U 11;
D 5;
L 8;
D 6;
L 2;
U 2;
L 14;
R 8;
U 15;
L 10;
D 1;
R 4;
L 8;
D 7;
L 15;
U 10;
D 14;
U 9;
L 7;
R 13;
U 11;
R 15;
L 11;
R 2;
L 11;
R 14;
L 1;
D 10;
L 2;
U 7;
L 9;
D 12;
R 2;
L 4;
U 4;
R 9;
L 6;
R 13;
D 1;
U 13;
R 7;
D 3;
R 14;
L 12;
D 15;
R 16;
L 7;
R 2;
U 3;
R 9;
U 10;
D 6;
U 7;
L 11;
D 12;
L 16;
R 12;
D 10;
U 16;
D 9;
U 14;
L 14;
U 11;
D 14;
L 14;
D 10;
L 3;
D 10;
U 6;
D 11;
L 8;
U 4;
D 1;
U 5;
D 5;
L 4;
U 8;
R 3;
D 12;
U 4;
R 8;
D 6;
U 8;
D 2;
U 12;
L 6;
D 12;
R 7;
D 6;
U 7;
D 12;
L 3;
R 2;
L 12;
R 13;
U 16;
L 6;
D 8;
U 13;
R 14;
D 4;
U 7;
D 1;
R 4;
D 13;
R 10;
D 7;
R 11;
L 6;
U 6;
R 7;
L 8;
D 2;
L 11;
U 3;
L 12;
U 4;
D 11;
U 8;
D 10;
U 1;
R 12;
U 1;
L 15;
R 15;
D 2;
L 8;
D 13;
L 3;
R 8;
U 14;
R 5;
U 3;
D 15;
U 7;
D 1;
L 6;
D 8;
U 13;
R 6;
L 6;
D 3;
L 9;
D 17;
U 8;
R 16;
L 6;
D 9;
U 3;
L 10;
R 13;
L 14;
U 8;
R 7;
U 12;
D 14;
R 1;
D 3;
L 11;
R 8;
D 9;
R 17;
D 5;
R 17;
U 8;
L 10;
D 7;
U 4;
D 16;
L 9;
D 1;
L 16;
R 7;
L 1;
R 11;
U 10;
R 2;
U 10;
L 15;
U 10;
R 2;
D 11;
U 12;
L 15;
U 4;
D 2;
R 4;
U 2;
L 11;
R 16;
U 10;
R 4;
D 9;
U 7;
D 2;
R 10;
D 14;
L 10;
U 9;
R 7;
D 3;
R 7;
L 3;
U 15;
D 13;
L 17;
R 12;
U 13;
D 16;
U 13;
R 13;
U 14;
L 16;
U 7;
D 2;
R 11;
U 17;
D 9;
R 12;
U 16;
L 11;
R 3;
U 9;
L 6;
D 2;
U 1;
D 7;
L 1;
U 7;
D 8;
U 11;
L 4;
R 6;
L 2;
U 12;
L 13;
U 5;
L 17;
R 16;
D 10;
U 12;
L 7;
R 4;
U 8;
D 17;
R 13;
L 2;
D 5;
L 1;
R 2;
D 16;
U 9;
D 15;
L 8;
U 14;
R 9;
D 18;
U 16;
L 17;
U 9;
D 11;
U 17;
R 8;
D 17;
U 14;
D 8;
U 8;
R 8;
U 14;
R 5;
L 1;
R 3;
D 5;
U 10;
R 16;
U 18;
D 16;
U 11;
D 18;
U 13;
L 11;
D 2;
R 16;
D 15;
L 9;
D 12;
R 11;
L 8;
U 8;
R 10;
L 2;
D 6;
L 5;
D 9;
L 3;
D 1;
U 18;
D 12;
U 13;
L 6;
R 17;
D 10;
R 9;
L 6;
R 3;
U 1;
R 1;
U 6;
L 15;
U 8;
D 15;
U 14;
R 10;
L 6;
U 1;
L 12;
R 9;
D 13;
U 1;
L 16;
U 16;
L 13;
R 4;
U 3;
D 11;
L 12;
R 11;
U 17;
R 18;
L 4;
R 6;
L 18;
D 10;
L 16;
R 2;
D 4;
R 14;
D 11;
L 12;
R 7;
L 9;
U 12;
D 12;
R 4;
L 1;
D 14;
R 14;
L 3;
U 2;
L 6;
R 7;
D 6;
U 18;
L 17;
U 12;
R 12;
L 5;
D 13;
R 7;
D 8;
L 16;
D 13;
U 4;
D 3;
R 16;
L 9;
U 8;
D 15;
R 8;
L 12;
R 5;
L 1;
U 11;
D 11;
L 10;
U 7;
D 6;
L 15;
D 9;
R 10;
D 6;
U 14;
L 7;
U 19;
R 17;
L 12;
U 1;
L 9;
R 17;
D 12;
U 3;
L 15;
R 16;
D 15;
R 15;
L 1;
U 16;
R 19;
D 9;
L 16;
D 12;
R 8;
L 2;
D 16;
L 17;
U 16;
D 9;
L 9;
U 8;
L 9;
R 16;
L 3;
D 8;
U 7;
D 10;
U 17;
R 2;
D 16;
R 6;
U 9;
R 4;
L 17;
D 10;
U 10;
L 14;
D 9;
R 8;
L 9;
R 18;
U 13;
L 16;
R 2;
U 16;
L 11;
U 4;
L 13;
R 8;
L 19;
U 4;
D 10;
R 10;
U 14;
R 13;
L 17;
U 17;
R 12;
D 18;
R 2;
D 5;
L 12;
U 6;
D 7;
R 9;
L 13;
D 15;
R 9;
U 16;
D 14;
R 8;
L 8;
U 10;
L 8;
D 18;
U 8;
D 9;
L 6;
R 8;
U 4;
D 14;
L 13;
D 4;
R 3;
U 13;
L 2].

Open Scope Z_scope.
Fixpoint set_add (pos : (Z*Z)) (l : list (Z*Z)) :=
  let (x,y) := pos in
  match l with
  | nil => [pos]
  | (x',y') :: r => if x <? x' then (x',y') :: set_add pos r else if y <? y' then (x',y') :: set_add pos r else if andb (x =? x') (y =? y') then l else pos :: l
  end.

Definition state : Type := ((Z*Z)*(Z*Z)*list (Z*Z)).

Definition move_close (h : Z*Z) (t : Z*Z) : Z*Z :=
  let (hx,hy) := h in
  let (tx,ty) := t in
  if Z.max (Z.abs (hx-tx)) (Z.abs (hy-ty)) >? 1 then
    (tx+Z.sgn (hx-tx),ty+Z.sgn (hy-ty))
  else
    t
.

Definition step_right (curState : state) : state :=
  let (p,seen)  := curState in
  let (h,t)  := p in
  let (hx,hy) := h in
  let (tx,ty) := t in
  let h' := (hx+1,hy) in
  let t' := move_close h' (tx,ty) in
  (h',t',set_add t' seen)
.

Definition step_left (curState : state) : state :=
  let (p,seen)  := curState in
  let (h,t)  := p in
  let (hx,hy) := h in
  let (tx,ty) := t in
  let h' := (hx-1,hy) in
  let t' := move_close h' (tx,ty) in
  (h',t',set_add t' seen)
.

Definition step_up (curState : state) : state :=
  let (p,seen)  := curState in
  let (h,t)  := p in
  let (hx,hy) := h in
  let (tx,ty) := t in
  let h' := (hx,hy+1) in
  let t' := move_close h' (tx,ty) in
  (h',t',set_add t' seen)
.

Definition step_down (curState : state) : state :=
  let (p,seen)  := curState in
  let (h,t)  := p in
  let (hx,hy) := h in
  let (tx,ty) := t in
  let h' := (hx,hy-1) in
  let t' := move_close h' (tx,ty) in
  (h',t',set_add t' seen)
.

Fixpoint n_times {A} (t : nat) (f : A -> A) (a : A):=
  match t with
  | O => a
  | S n => n_times n f (f a)
  end.

Definition step (m : move) (curState : state) : state :=
  let (p,seen)  := curState in
  let (h,t)  := p in
  let (hx,hy) := h in
  let (tx,ty) := t in
  match m with
  | R n => n_times n step_right curState
  | L n => n_times n step_left curState
  | U n => n_times n step_up curState
  | D n => n_times n step_down curState
  end.

Definition flip {A B C} (f : A -> B -> C) (b : B) (a : A) :=
  f a b.

Definition impl_1 (i : list move) :=
  let (p,seen) := (fold_left (flip step) i ((0,0),(0,0),[(0,0)])) in
  length seen.

Example test1 : impl_1 test_in = 13%nat. Proof. vm_compute. reflexivity. Qed.

Compute (impl_1 input).

Definition state_2 : Type := ((Z*Z)*list (Z*Z)*list (Z*Z)).

Fixpoint update_rope (prev : Z*Z) (l : list (Z*Z)) :=
  match l with
  | nil => nil
  | h :: r => let h' := (move_close prev h) in h' :: update_rope h' r
  end.

Fixpoint plast (l : list (Z*Z)) :=
  match l with
  | nil => (0,0)
  | [x] => x
  | h :: t => plast t
  end.

Definition step_right_2 (curState : state_2) : state_2 :=
  let (p,seen)  := curState in
  let (h,t)  := p in
  let (hx,hy) := h in
  let h' := (hx+1,hy) in
  let t' := update_rope h' t in
  (h',t',set_add (plast t') seen)
.

Definition step_left_2 (curState : state_2) : state_2 :=
  let (p,seen)  := curState in
  let (h,t)  := p in
  let (hx,hy) := h in
  let h' := (hx-1,hy) in
  let t' := update_rope h' t in
  (h',t',set_add (plast t') seen)
.
Definition step_up_2 (curState : state_2) : state_2 :=
  let (p,seen)  := curState in
  let (h,t)  := p in
  let (hx,hy) := h in
  let h' := (hx,hy+1) in
  let t' := update_rope h' t in
  (h',t',set_add (plast t') seen)
.
Definition step_down_2 (curState : state_2) : state_2 :=
  let (p,seen)  := curState in
  let (h,t)  := p in
  let (hx,hy) := h in
  let h' := (hx,hy-1) in
  let t' := update_rope h' t in
  (h',t',set_add (plast t') seen)
.

Definition step_2 (m : move) (curState : state_2) : state_2 :=
  match m with
  | R n => n_times n step_right_2 curState
  | L n => n_times n step_left_2 curState
  | U n => n_times n step_up_2 curState
  | D n => n_times n step_down_2 curState
  end.

Definition impl_2 (i : list move) :=
  let (p,seen) := (fold_left (flip step_2) i ((0,0),[(0,0);(0,0);(0,0);(0,0);(0,0);(0,0);(0,0);(0,0);(0,0)],[(0,0)])) in
  length seen.

Example test2 : impl_2 test_in = 1%nat. Proof. vm_compute. reflexivity. Qed.

Compute (impl_2 input).